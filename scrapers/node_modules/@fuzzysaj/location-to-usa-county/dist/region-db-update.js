"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const fs = require("fs");
const path = require("path");
const util_1 = require("util");
const shp2json = require("shp2json");
const file_utils_1 = require("./file-utils");
const debug_1 = require("debug");
const debug = debug_1.default('location-to-usa-county');
const finalRegionFilePath = path.resolve(__dirname, '../data/ne_10m_admin_1_states_provinces.json');
const tempRegionFilePath = path.resolve(__dirname, '../data/ne_10m_admin_1_states_provinces.temp.json');
const regionDbUrl = "https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/10m/cultural/ne_10m_admin_1_states_provinces.zip";
const msPerDay = 1000 * 60 * 60 * 24;
const daysBetweenRegionUpdates = 30;
const msBetweenRegionUpdates = daysBetweenRegionUpdates * msPerDay; // 30 days between updates
/** Deletes final and temporary GeoJson db files if they exist.  Returns void. */
async function delRegionFile() {
    await file_utils_1.delFileIfExists(tempRegionFilePath);
    await file_utils_1.delFileIfExists(finalRegionFilePath);
}
exports.delRegionFile = delRegionFile;
/** Returns true if final GeoJson db file exists and size > 0 bytes. */
async function okRegionFile() {
    return await file_utils_1.fileSizeInBytes(finalRegionFilePath) > 0;
}
exports.okRegionFile = okRegionFile;
/** Returns true if the regions GeoJson db file exists, and is
 * greater than 0 bytes and is not older than 30 days old.
 */
async function isRegionFileCurrent() {
    return ((await okRegionFile()) &&
        ((await file_utils_1.msSinceLastUpdate(finalRegionFilePath)) < msBetweenRegionUpdates));
}
exports.isRegionFileCurrent = isRegionFileCurrent;
/** When the regions GeoJson file does not exist, or when when it is
 * more than 30 days since last update, the regions GeoJson file is
 * downloaded to a temporary file and is renamed to the final file
 * if success.  If not successful, the original file remains.
 * Returns true on success.
 */
async function updateRegionFile() {
    if (await isRegionFileCurrent()) {
        const daysOld = ((await file_utils_1.msSinceLastUpdate(finalRegionFilePath)) / msPerDay).toFixed(1);
        debug(`Skipping download since ${finalRegionFilePath} already exists ` +
            `and is ${daysOld} < ${daysBetweenRegionUpdates} days old.`);
        return true;
    }
    debug(`Downloading\n  ${regionDbUrl}\n  to\n  ${tempRegionFilePath}`);
    const resp = await axios_1.default({
        method: "get",
        url: regionDbUrl,
        responseType: "stream"
    });
    const ws = fs.createWriteStream(tempRegionFilePath);
    shp2json(resp.data).pipe(ws);
    return new Promise(function (resolve, reject) {
        ws.on('finish', async () => {
            debug(`Finished downloading ${tempRegionFilePath} with status ${resp.status}.`);
            await util_1.promisify(fs.rename)(tempRegionFilePath, finalRegionFilePath);
            debug(`Renamed to ${finalRegionFilePath}`);
            resolve(true);
        });
        ws.on('error', (err) => {
            debug(`Download to ${tempRegionFilePath} failed: ${err.toString()}`);
            reject(err);
        });
    });
}
exports.updateRegionFile = updateRegionFile;
//# sourceMappingURL=region-db-update.js.map